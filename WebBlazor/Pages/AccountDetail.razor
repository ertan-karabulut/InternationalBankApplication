@page "/AccountDetail/{Id:int}"
@inject IServiceOperations operation
@inject IJSRuntime _jSRuntime
@inject NavigationManager navigation
@inject IState<AccountState> AccountState

<SuccessModalComponent Message="Hesap kama işlemi başarılı." Id="successModal" ApprovalOnPress=@(()=> navigation.NavigateTo("/")) />

<InformationModalComponent Message=@validationMessage Title="Bilgilendirme" Id="informationModal" />

<PageBase PageName="Ürün Detayı">
    <RightHeader>
        @if (!object.Equals(accountListItem, null))
        {
            <select @onchange=ChangeAccount class="custom-select">
                @foreach(var item in accountListItem)
                {
                    <option selected="@item.Selected" value="@item.Value">@item.Text</option>
                }
            </select>
        }
    </RightHeader>
    <Child>
        @if (accountDetail != null)
        {
            <div class="container not-print">
                <div class="row">
                    <div class="col-sm-auto">
                        <div class="row">
                            <div class="col-sm">
                                @accountDetail.Account @accountDetail.BranchName isimli tanımla
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm">
                                Ad Soyad/Ünvan
                            </div>
                            <div class="col-sm">
                                : @accountDetail.CustomerFullName
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm">
                                IBAN
                            </div>
                            <div class="col-sm">
                                : @accountDetail.Iban
                            </div>
                        </div>
                    </div>
                    <div class="col-sm">
                        <div class="row">
                            <div class="col-sm">
                                <div class="float-right">
                                    @accountDetail.Balance @accountDetail.CurrencyCode
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm">
                                <div class="float-right">
                                    Bakiye
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm">
                                <div class="float-right">
                                    @accountDetail.AvailableBalance @accountDetail.CurrencyCode
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm">
                                <div class="float-right">
                                    Kullanılabilir Bakiye
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-auto">
                        <ButtonComponent Type="button" Title="HESAP KAPAMA" OnClick=@CloseAccount />
                    </div>
                </div>
            </div>
        }
    </Child>
</PageBase>

<PageBase>
    <Child>
        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <a class="nav-link active" id="accountHistory-tab" data-toggle="tab" href="#accountHistory" role="tab" aria-controls="accountHistory" aria-selected="true">HESAP HAREKETLERİ</a>
            </li>
            <li class="nav-item" role="presentation">
                <a class="nav-link" id="accountInformation-tab" data-toggle="tab" href="#accountInformation" role="tab" aria-controls="accountInformation" aria-selected="false">HESAP BİLGİLERİ</a>
            </li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane fade show active" id="accountHistory" role="tabpanel" aria-labelledby="accountHistory-tab">
                <EditForm Model="historyRequest" OnSubmit="@HistoryFormSubmit">
                    <div class="container">
                        <div class="row">
                            <div class="col-sm">
                                <div class="row">
                                    <div class="col-sm">
                                        Dönem
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm">
                                        <InputSelect @bind-Value="@historyRequest.CreateDate" class="custom-select">
                                            <option value="1">Bugün</option>
                                            <option value="2">Dün</option>
                                            <option value="3" selected>Son 7 gün</option>
                                            <option value="4">Son 15 gün</option>
                                            <option value="5">Bu Ay</option>
                                            <option value="6">Son 1 ay</option>
                                            <option value="7">Son 3 ay</option>
                                            <option value="8">Son 6 ay</option>
                                            <option value="9">Bu Yıl</option>
                                            <option value="10">Son 1 yıl</option>
                                            <option value="11">Son 2 yıl</option>
                                        </InputSelect>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm">
                                <div class="row">
                                    <div class="col-sm">
                                        Sıralama
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm">
                                        <InputSelect @bind-Value="@historyRequest.Short" class="custom-select">
                                            <option value="DESC" selected>Yeniden eskiye</option>
                                            <option value="ASC">Eskiden yeniye</option>
                                        </InputSelect>
                                    </div>
                                </div>
                            </div>
                            <div class="col-sm">
                                <div class="row">
                                    <div class="col-sm">
                                        Açıklama
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-sm">
                                        <InputSelect class="custom-select" @bind-Value="@historyRequest.Explanation">
                                            <option value"Hepsi">Hepsi</option>
                                            <option value="Maaş">Maaş</option>
                                            <option value="Para Çekme">Para Çekme</option>
                                            <option value="Eğitim">Eğitim</option>
                                            <option value="Vergi">Vergi</option>
                                            <option value="Para Yatırma">Para Yatırma</option>
                                        </InputSelect>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-auto">
                                <ButtonComponent Type="submit" Title="GÖRÜNTÜLE" />
                            </div>
                        </div>
                    </div>
                </EditForm>
                @if (!object.Equals(accountHistory, null) && !object.Equals(accountHistory.Data, null))
                {
                    <div class="print">
                        <Table>
                            <TableHeader>
                                <th>Tarih</th>
                                <th>Açıklama</th>
                                <th>Tutar</th>
                                <th>Bakiye</th>
                            </TableHeader>
                            <RowTemplate>
                                @foreach (var item in accountHistory.Data)
                                {
                                    <tr>
                                        <td><DateFormatComponent DateFormat="@item.CreateDate" /></td>
                                        <td>@item.Explanation</td>
                                        <td>@item.Amount.ToString("N")</td>
                                        <td>@item.NowBalance.ToString("N")</td>
                                    </tr>
                                }
                            </RowTemplate>
                        </Table>
                    </div>
                    <PaginationComponent OnClick="ChangePage" TotalCount=totalCount Take=take />
                    <div class="container">
                        <div class="row" style="color:#33a8ac">
                            <div class="col-sm-2">
                                <a role="button" onclick="print()">
                                    <i>
                                        <svg style="width:24px;height:24px" viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M18,3H6V7H18M19,12A1,1 0 0,1 18,11A1,1 0 0,1 19,10A1,1 0 0,1 20,11A1,1 0 0,1 19,12M16,19H8V14H16M19,8H5A3,3 0 0,0 2,11V17H6V21H18V17H22V11A3,3 0 0,0 19,8Z" />
                                        </svg>
                                    </i>
                                    YAZDIR
                                </a>
                            </div>
                            <div class="col-sm-2">
                                <a role="button" @onclick="ExcelDownload">
                                    <i>
                                        <svg style="width:24px;height:24px" viewBox="0 0 24 24">
                                            <path fill="currentColor" d="M13,5V11H14.17L12,13.17L9.83,11H11V5H13M15,3H9V9H5L12,16L19,9H15V3M19,18H5V20H19V18Z" />
                                        </svg>
                                    </i>
                                    EXCELL İNDİR
                                </a>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="tab-pane fade" id="accountInformation" role="tabpanel" aria-labelledby="accountInformation-tab">
                <div class="print">
                    <AccountInformationComponent AccountDetail="accountDetail" />
                </div>
                <div class="container">
                    <div class="row" style="color:#33a8ac">
                        <div class="col-sm-2">
                            <a role="button" onclick="print()">
                                <i>
                                    <svg style="width:24px;height:24px" viewBox="0 0 24 24">
                                        <path fill="currentColor" d="M18,3H6V7H18M19,12A1,1 0 0,1 18,11A1,1 0 0,1 19,10A1,1 0 0,1 20,11A1,1 0 0,1 19,12M16,19H8V14H16M19,8H5A3,3 0 0,0 2,11V17H6V21H18V17H22V11A3,3 0 0,0 19,8Z" />
                                    </svg>
                                </i>
                                YAZDIR
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Child>
</PageBase>

@code {

    [Parameter]
    public int Id { get; set; }
    AccountDetailDto accountDetail;
    AccountUpdateDto accountUpdate;
    DataTableResponse<AccountHistoryDto> accountHistory;
    AccountHistoryRequestModel historyRequest = new AccountHistoryRequestModel();
    List<SelectListItemModel> accountListItem;
    long totalCount;
    long take;
    string validationMessage;

    protected override async Task OnInitializedAsync()
    {
        var resultAccountDetail = await operation.Get<Result<AccountDetailDto>>($"/Account/AccountDetail?accountId={Id}");

        if (resultAccountDetail.ResultStatus)
        {
            accountDetail = resultAccountDetail.ResultObje;
            accountUpdate = new AccountUpdateDto();
            accountUpdate.Id = Id;
        }

        await this.RequestHistory();
        var accountList = AccountState.Value.AccountList;
        Console.WriteLine(accountList);
        if (!object.Equals(accountList, null))
        {
            accountListItem = new List<SelectListItemModel>();
            accountList.ForEach(x => accountListItem.Add(new SelectListItemModel { Text = x.Account, Value = x.Id.ToString(), Selected= Id == x.Id }));
        }
    }

    async Task HistoryFormSubmit()
    {
        await this.RequestHistory();
    }

    DataTableRequest CreateHistoryRequest(DataTableRequest request)
    {
        request.Filter.Add(new NameValuePair { Name = "AccountId", Value = Id.ToString() });
        if (!object.Equals(historyRequest, null))
        {
            if (!string.IsNullOrEmpty(historyRequest.Explanation))
            {
                if (historyRequest.Explanation == "Hepsi")
                    request.Filter.Add(new NameValuePair { Name = "Explanation", Value = null });
                else
                    request.Filter.Add(new NameValuePair { Name = "Explanation", Value = historyRequest.Explanation });
            }

            if (!string.IsNullOrEmpty(historyRequest.CreateDate))
            {
                if (historyRequest.CreateDate == "1")
                    request.Filter.Add(new NameValuePair { Name = "Today", Value = "True" });
                else if (historyRequest.CreateDate == "2")
                    request.Filter.Add(new NameValuePair { Name = "Yesterday", Value = "True" });
                else
                    request.Filter.Add(new NameValuePair { Name = "CreateDate", Value = this.SelectedDate(historyRequest.CreateDate) });
            }

            if (!string.IsNullOrEmpty(historyRequest.Short))
            {
                request.Order.Column = "CreateDate";
                request.Order.Short = historyRequest.Short;
            }
        }
        return request;
    }

    string SelectedDate(string selectDate)
    {
        string result = null;
        switch (selectDate)
        {
            case "3":
                result = DateTime.Now.AddDays(-7).ToShortDateString();
                break;
            case "4":
                result = DateTime.Now.AddDays(-15).ToShortDateString();
                break;
            case "5":
                result = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 01).ToShortDateString();
                break;
            case "6":
                result = DateTime.Now.AddMonths(-1).ToShortDateString();
                break;
            case "7":
                result = DateTime.Now.AddMonths(-3).ToShortDateString();
                break;
            case "8":
                result = DateTime.Now.AddMonths(-6).ToShortDateString();
                break;
            case "9":
                result = new DateTime(DateTime.Now.Year, 01, 01).ToShortDateString();
                break;
            case "10":
                result = DateTime.Now.AddYears(-1).ToShortDateString();
                break;
            case "11":
                result = DateTime.Now.AddYears(-2).ToShortDateString();
                break;
        }
        return result;
    }
    async Task RequestHistory()
    {
        var request = new DataTableRequest();
        this.take = request.Take;
        this.CreateHistoryRequest(request);
        var resultHistory = await operation.Post<Result<DataTableResponse<AccountHistoryDto>>>($"/Account/AccountHistory", request);
        if (resultHistory.ResultStatus)
        {
            accountHistory = resultHistory.ResultObje;
            this.totalCount = resultHistory.ResultObje.TotalCount;
        }
        else
        {
            accountHistory = null;
            this.totalCount = 0;
        }
    }
    async Task ChangePage(PaginationModel pagination)
    {
        var request = new DataTableRequest();
        request.Skip = pagination.Skip;
        this.CreateHistoryRequest(request);

        var resultHistory = await operation.Post<Result<DataTableResponse<AccountHistoryDto>>>($"/Account/AccountHistory", request);
        if (resultHistory.ResultStatus)
        {
            accountHistory = resultHistory.ResultObje;
        }
    }

    async Task ExcelDownload()
    {
        byte[] fileContents;
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

        using (var package = new ExcelPackage())
        {
            var workSheet = package.Workbook.Worksheets.Add("Hesap Hareketleri");
            workSheet.Cells[1, 1].Value = "Tarih";
            workSheet.Cells[1, 2].Value = "Açıklama";
            workSheet.Cells[1, 3].Value = "Tutar";
            workSheet.Cells[1, 4].Value = "Bakiye";
            int i = 2;
            foreach (var item in accountHistory.Data)
            {
                workSheet.Cells[i, 1].Value = item.CreateDate.HasValue ? item.CreateDate.Value.ToShortDateString() : "";
                workSheet.Cells[i, 2].Value = item.Explanation;
                workSheet.Cells[i, 3].Value = item.Amount.ToString("N");
                workSheet.Cells[i, 4].Value = item.NowBalance.ToString("N");
                i += 1;
            }
            fileContents = package.GetAsByteArray();
        }
        await this._jSRuntime.InvokeVoidAsync("SaveAsFile", "Test.xlsx", Convert.ToBase64String(fileContents));
    }

    async Task CloseAccount()
    {
        var result = await operation.Post<Result>($"/Account/CloseAccount", accountUpdate);
        if (result.ResultStatus)
            await _jSRuntime.InvokeVoidAsync("OpenModal", "#successModal");
        else if (result.ResultCode == 401)
        {
            validationMessage = result.ResultInnerMessage;
            await _jSRuntime.InvokeVoidAsync("OpenModal", "#informationModal");
        }
    }
    async Task ChangeAccount(ChangeEventArgs e)
    {
        Id = int.Parse(e.Value.ToString());
        await this.OnInitializedAsync();
    }
}